name: Release

on:
  push:
    branches:
      - "main"
    paths:
      - "**/Cargo.toml"

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: "Create New Release"
    runs-on: "ubuntu-latest"
    
    outputs:
      version: ${{ steps.pkg.outputs.VERSION }}
      exists: ${{ steps.check_tag.outputs.EXISTS }}

    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Get the tag"
        id: pkg
        shell: "bash"
        run: |
          VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/["]/, "", $2); printf("%s",$2) }' Cargo.toml)
          echo ::set-output name=version::$(echo $VERSION)
          echo VERSION=$VERSION >> $GITHUB_OUTPUT

      - name: Check if this is a new release
        id: check-tag
        shell: bash
        run: |
          TAG_EXIST=$(curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/git/ref/tags/${{ steps.vars.outputs.tag }})
          echo ::set-output name=exists::$([[ -z "$TAG_EXIST" ]] && echo "false" || echo "true")
          echo EXISTS=$([[ -z "$TAG_EXIST" ]] && echo "false" || echo "true") >> $GITHUB_OUTPUT
      
      - name: Create a release
        uses: actions/create-release@v1
        if: steps.check-tag.outputs.exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.pkg.outputs.version }}
          release_name: Release ${{ steps.pkg.outputs.version }}
          draft: false
          prerelease: false

  build:
    name: "Build Targets And Upload"
    if: needs.release.outputs.exists == 'false'
    needs: 
      - release
    strategy:
      matrix:
        include:
          - target: "x86_64-unknown-linux-gnu"
            os: "ubuntu-latest"
          - target: "x86_64-unknown-linux-musl"
            os: "ubuntu-latest"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: "Upload Binaries"
        uses: "taiki-e/upload-rust-binary-action@v1"
        with:
          bin: "autosleep"
          target: ${{ matrix.target }}
          archive: $bin-${{ matrix.target }}
          ref: refs/tags/v${{ needs.release.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
